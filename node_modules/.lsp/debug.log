Hello - from /home/montyaxn/.vscode-server/extensions/jaredly.reason-vscode-1.7.2/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true,"useOldDuneProcess":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml","languageId":"ocaml","version":1,"text":"type term =\n  | TmVar of int * int\n  | TmAbs of string * term\n  | TmApp of term * term\n\n\ntype binding = NameBind\n\n\ntype context = (string * binding) list\n\n\nlet rec pickfrechname lst str =\n  let new_str = str ^ \"'\" in\n  let check (s, _) = (s = new_str) in\n    if List.exists check lst then\n      pickfrechname lst new_str\n    else\n      let new_ctx = (new_str, NameBind) :: lst in\n      (new_ctx, new_str)\n\n\nlet index2name ctx t =\n  if List.length ctx <= t then\n    None\n  else\n    Some(List.nth ctx t |> (fun (s, _) -> s))\n\n\nlet get_option a opt =\n  match opt with\n  | Some(a') -> a'\n  | None -> a\n\n\nlet ctxlength ctx = List.length ctx\n\n\nlet rec term_to_string ctx t =\n  match t with\n  | TmAbs(x, t1) ->\n    let (ctx', x') = pickfrechname ctx x in\n    \"(λ \" ^  x' ^ \". \" ^ term_to_string ctx' t1 ^ \")\"\n  | TmApp(t1, t2) ->\n    \"(\" ^ term_to_string ctx t1 ^ \". \" ^ term_to_string ctx t2 ^ \")\"\n  | TmVar(x, n) ->\n    if ctxlength ctx = n then\n      index2name ctx x |> get_option \"[bad index]\"\n    else\n      \"[bad index]\"\n\n\nlet termShift d t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x >= c) -> TmVar(x + d, n + d)\n    | TmVar(x, n) -> TmVar(x, n + d)\n    | TmAbs(x, t1) -> TmAbs(x, walk(c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubst j s t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x = j + c) -> termShift c s\n    | TmVar(x, n) -> TmVar(x, n)\n    | TmAbs(x, t1) -> TmAbs(x, walk (c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubstTop s t =\n    termShift (-1) (termSubst 0 (termShift 1 s) t)\n\n\nlet rec isval ctx t =\n  match t with\n  | TmAbs(_, _) -> true\n  | _ -> false\n\n\nlet rec eval1 ctx t =\n  match t with\n  | TmApp(TmAbs(x, t12), v2) when isval ctx v2 ->\n    termSubstTop v2 t12\n  | TmApp(v1, t2) when isval ctx v1 ->\n    let t2' = eval1 ctx t2 in\n    TmApp(v1, t2')\n  | TmApp(t1, t2) ->\n    let t1' = eval1 ctx t1 in\n    TmApp(t1', t2)\n  | _ -> TmWrong\n\n\nlet main =\n  let t = TmApp(TmAbs(\"x\", TmVar(0, 1)), TmAbs(\"y\", TmVar(0, 1))) in\n  let ctx = [] in\n    eval1 ctx t |> term_to_string ctx |> Printf.printf \"%s\\n\""}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"range":{"start":{"line":100,"character":61},"end":{"line":100,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml","version":4},"contentChanges":[{"text":"type term =\n  | TmVar of int * int\n  | TmAbs of string * term\n  | TmApp of term * term\n\n\ntype binding = NameBind\n\n\ntype context = (string * binding) list\n\n\nlet rec pickfrechname lst str =\n  let new_str = str ^ \"'\" in\n  let check (s, _) = (s = new_str) in\n    if List.exists check lst then\n      pickfrechname lst new_str\n    else\n      let new_ctx = (new_str, NameBind) :: lst in\n      (new_ctx, new_str)\n\n\nlet index2name ctx t =\n  if List.length ctx <= t then\n    None\n  else\n    Some(List.nth ctx t |> (fun (s, _) -> s))\n\n\nlet get_option a opt =\n  match opt with\n  | Some(a') -> a'\n  | None -> a\n\n\nlet ctxlength ctx = List.length ctx\n\n\nlet rec term_to_string ctx t =\n  match t with\n  | TmAbs(x, t1) ->\n    let (ctx', x') = pickfrechname ctx x in\n    \"(λ \" ^  x' ^ \". \" ^ term_to_string ctx' t1 ^ \")\"\n  | TmApp(t1, t2) ->\n    \"(\" ^ term_to_string ctx t1 ^ \". \" ^ term_to_string ctx t2 ^ \")\"\n  | TmVar(x, n) ->\n    if ctxlength ctx = n then\n      index2name ctx x |> get_option \"[bad index]\"\n    else\n      \"[bad index]\"\n\n\nlet termShift d t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x >= c) -> TmVar(x + d, n + d)\n    | TmVar(x, n) -> TmVar(x, n + d)\n    | TmAbs(x, t1) -> TmAbs(x, walk(c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubst j s t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x = j + c) -> termShift c s\n    | TmVar(x, n) -> TmVar(x, n)\n    | TmAbs(x, t1) -> TmAbs(x, walk (c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubstTop s t =\n    termShift (-1) (termSubst 0 (termShift 1 s) t)\n\n\nlet rec isval ctx t =\n  match t with\n  | TmAbs(_, _) -> true\n  | _ -> false\n\n\nlet rec eval1 ctx t =\n  match t with\n  | TmApp(TmAbs(x, t12), v2) when isval ctx v2 ->\n    termSubstTop v2 t12\n  | TmApp(v1, t2) when isval ctx v1 ->\n    let t2' = eval1 ctx t2 in\n    TmApp(v1, t2')\n  | TmApp(t1, t2) ->\n    let t1' = eval1 ctx t1 in\n    TmApp(t1', t2)\n  | _ -> TmWrong\n\n\nlet main =\n  let t = TmApp(TmAbs(\"x\", TmVar(0, 1)), TmAbs(\"y\", TmVar(0, 1))) in\n  let ctx = [] in\n    eval1 ctx t |> term_to_string ctx |> Printf.printf \"%s\\n\"git"}]}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"position":{"line":100,"character":63},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"range":{"start":{"line":100,"character":64},"end":{"line":100,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml","version":6},"contentChanges":[{"text":"type term =\n  | TmVar of int * int\n  | TmAbs of string * term\n  | TmApp of term * term\n\n\ntype binding = NameBind\n\n\ntype context = (string * binding) list\n\n\nlet rec pickfrechname lst str =\n  let new_str = str ^ \"'\" in\n  let check (s, _) = (s = new_str) in\n    if List.exists check lst then\n      pickfrechname lst new_str\n    else\n      let new_ctx = (new_str, NameBind) :: lst in\n      (new_ctx, new_str)\n\n\nlet index2name ctx t =\n  if List.length ctx <= t then\n    None\n  else\n    Some(List.nth ctx t |> (fun (s, _) -> s))\n\n\nlet get_option a opt =\n  match opt with\n  | Some(a') -> a'\n  | None -> a\n\n\nlet ctxlength ctx = List.length ctx\n\n\nlet rec term_to_string ctx t =\n  match t with\n  | TmAbs(x, t1) ->\n    let (ctx', x') = pickfrechname ctx x in\n    \"(λ \" ^  x' ^ \". \" ^ term_to_string ctx' t1 ^ \")\"\n  | TmApp(t1, t2) ->\n    \"(\" ^ term_to_string ctx t1 ^ \". \" ^ term_to_string ctx t2 ^ \")\"\n  | TmVar(x, n) ->\n    if ctxlength ctx = n then\n      index2name ctx x |> get_option \"[bad index]\"\n    else\n      \"[bad index]\"\n\n\nlet termShift d t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x >= c) -> TmVar(x + d, n + d)\n    | TmVar(x, n) -> TmVar(x, n + d)\n    | TmAbs(x, t1) -> TmAbs(x, walk(c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubst j s t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x = j + c) -> termShift c s\n    | TmVar(x, n) -> TmVar(x, n)\n    | TmAbs(x, t1) -> TmAbs(x, walk (c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubstTop s t =\n    termShift (-1) (termSubst 0 (termShift 1 s) t)\n\n\nlet rec isval ctx t =\n  match t with\n  | TmAbs(_, _) -> true\n  | _ -> false\n\n\nlet rec eval1 ctx t =\n  match t with\n  | TmApp(TmAbs(x, t12), v2) when isval ctx v2 ->\n    termSubstTop v2 t12\n  | TmApp(v1, t2) when isval ctx v1 ->\n    let t2' = eval1 ctx t2 in\n    TmApp(v1, t2')\n  | TmApp(t1, t2) ->\n    let t1' = eval1 ctx t1 in\n    TmApp(t1', t2)\n  | _ -> TmWrong\n\n\nlet main =\n  let t = TmApp(TmAbs(\"x\", TmVar(0, 1)), TmAbs(\"y\", TmVar(0, 1))) in\n  let ctx = [] in\n    eval1 ctx t |> term_to_string ctx |> Printf.printf \"%s\\n\"g"}]}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"position":{"line":100,"character":62},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml","version":7},"contentChanges":[{"text":"type term =\n  | TmVar of int * int\n  | TmAbs of string * term\n  | TmApp of term * term\n\n\ntype binding = NameBind\n\n\ntype context = (string * binding) list\n\n\nlet rec pickfrechname lst str =\n  let new_str = str ^ \"'\" in\n  let check (s, _) = (s = new_str) in\n    if List.exists check lst then\n      pickfrechname lst new_str\n    else\n      let new_ctx = (new_str, NameBind) :: lst in\n      (new_ctx, new_str)\n\n\nlet index2name ctx t =\n  if List.length ctx <= t then\n    None\n  else\n    Some(List.nth ctx t |> (fun (s, _) -> s))\n\n\nlet get_option a opt =\n  match opt with\n  | Some(a') -> a'\n  | None -> a\n\n\nlet ctxlength ctx = List.length ctx\n\n\nlet rec term_to_string ctx t =\n  match t with\n  | TmAbs(x, t1) ->\n    let (ctx', x') = pickfrechname ctx x in\n    \"(λ \" ^  x' ^ \". \" ^ term_to_string ctx' t1 ^ \")\"\n  | TmApp(t1, t2) ->\n    \"(\" ^ term_to_string ctx t1 ^ \". \" ^ term_to_string ctx t2 ^ \")\"\n  | TmVar(x, n) ->\n    if ctxlength ctx = n then\n      index2name ctx x |> get_option \"[bad index]\"\n    else\n      \"[bad index]\"\n\n\nlet termShift d t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x >= c) -> TmVar(x + d, n + d)\n    | TmVar(x, n) -> TmVar(x, n + d)\n    | TmAbs(x, t1) -> TmAbs(x, walk(c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubst j s t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x = j + c) -> termShift c s\n    | TmVar(x, n) -> TmVar(x, n)\n    | TmAbs(x, t1) -> TmAbs(x, walk (c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubstTop s t =\n    termShift (-1) (termSubst 0 (termShift 1 s) t)\n\n\nlet rec isval ctx t =\n  match t with\n  | TmAbs(_, _) -> true\n  | _ -> false\n\n\nlet rec eval1 ctx t =\n  match t with\n  | TmApp(TmAbs(x, t12), v2) when isval ctx v2 ->\n    termSubstTop v2 t12\n  | TmApp(v1, t2) when isval ctx v1 ->\n    let t2' = eval1 ctx t2 in\n    TmApp(v1, t2')\n  | TmApp(t1, t2) ->\n    let t1' = eval1 ctx t1 in\n    TmApp(t1', t2)\n  | _ -> TmWrong\n\n\nlet main =\n  let t = TmApp(TmAbs(\"x\", TmVar(0, 1)), TmAbs(\"y\", TmVar(0, 1))) in\n  let ctx = [] in\n    eval1 ctx t |> term_to_string ctx |> Printf.printf \"%s\\n\""}]}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 9, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"range":{"start":{"line":100,"character":61},"end":{"line":100,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"position":{"line":99,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml"},"range":{"start":{"line":99,"character":17},"end":{"line":99,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///mnt/c/Users/yuyu3/Documents/work/kaisei-tapl/ch7.ml","version":7},"contentChanges":[{"text":"type term =\n  | TmVar of int * int\n  | TmAbs of string * term\n  | TmApp of term * term\n\n\ntype binding = NameBind\n\n\ntype context = (string * binding) list\n\n\nlet rec pickfrechname lst str =\n  let new_str = str ^ \"'\" in\n  let check (s, _) = (s = new_str) in\n    if List.exists check lst then\n      pickfrechname lst new_str\n    else\n      let new_ctx = (new_str, NameBind) :: lst in\n      (new_ctx, new_str)\n\n\nlet index2name ctx t =\n  if List.length ctx <= t then\n    None\n  else\n    Some(List.nth ctx t |> (fun (s, _) -> s))\n\n\nlet get_option a opt =\n  match opt with\n  | Some(a') -> a'\n  | None -> a\n\n\nlet ctxlength ctx = List.length ctx\n\n\nlet rec term_to_string ctx t =\n  match t with\n  | TmAbs(x, t1) ->\n    let (ctx', x') = pickfrechname ctx x in\n    \"(λ \" ^  x' ^ \". \" ^ term_to_string ctx' t1 ^ \")\"\n  | TmApp(t1, t2) ->\n    \"(\" ^ term_to_string ctx t1 ^ \". \" ^ term_to_string ctx t2 ^ \")\"\n  | TmVar(x, n) ->\n    if ctxlength ctx = n then\n      index2name ctx x |> get_option \"[bad index]\"\n    else\n      \"[bad index]\"\n\n\nlet termShift d t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x >= c) -> TmVar(x + d, n + d)\n    | TmVar(x, n) -> TmVar(x, n + d)\n    | TmAbs(x, t1) -> TmAbs(x, walk(c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubst j s t =\n  let rec walk c t =\n    match t with\n    | TmVar(x, n) when (x = j + c) -> termShift c s\n    | TmVar(x, n) -> TmVar(x, n)\n    | TmAbs(x, t1) -> TmAbs(x, walk (c + 1) t1)\n    | TmApp(t1, t2) -> TmApp(walk c t1, walk c t2)\n  in\n    walk 0 t\n\n\nlet termSubstTop s t =\n    termShift (-1) (termSubst 0 (termShift 1 s) t)\n\n\nlet rec isval ctx t =\n  match t with\n  | TmAbs(_, _) -> true\n  | _ -> false\n\n\nlet rec eval1 ctx t =\n  match t with\n  | TmApp(TmAbs(x, t12), v2) when isval ctx v2 ->\n    termSubstTop v2 t12\n  | TmApp(v1, t2) when isval ctx v1 ->\n    let t2' = eval1 ctx t2 in\n    TmApp(v1, t2')\n  | TmApp(t1, t2) ->\n    let t1' = eval1 ctx t1 in\n    TmApp(t1', t2)\n  | _ -> TmWrong\n\n\nlet main =\n  let t = TmApp(TmAbs(\"x\", TmVar(0, 1)), TmAbs(\"y\", TmVar(0, 1))) in\n  let ctx = [] in\n    eval1 ctx t |> term_to_string ctx |> Printf.printf \"%s\\n\""}]}}
